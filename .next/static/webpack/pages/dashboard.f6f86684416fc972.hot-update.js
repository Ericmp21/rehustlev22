"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/dashboard",{

/***/ "(pages-dir-browser)/./lib/mongodb.js":
/*!************************!*\
  !*** ./lib/mongodb.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"(pages-dir-browser)/./node_modules/mongoose/dist/browser.umd.js\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Check if we're on the client side\nconst isClient = \"object\" !== 'undefined';\n// Only access MONGODB_URI on the server side\nconst MONGODB_URI = !isClient ? process.env.MONGODB_URI : null;\n// Skip validation on client-side\nif (!isClient && !MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI\");\n}\n// Parse username from URI for logging purposes only\ntry {\n    if (MONGODB_URI.includes('@')) {\n        const credentialPart = MONGODB_URI.split('@')[0].split('//')[1];\n        if (credentialPart && credentialPart.includes(':')) {\n            const username = credentialPart.split(':')[0];\n            console.log(\"Using MongoDB with username: \".concat(username));\n        }\n    }\n} catch (error) {\n// Ignore parsing errors\n}\nlet cached = __webpack_require__.g.mongoose;\nif (!cached) {\n    cached = __webpack_require__.g.mongoose = {\n        conn: null,\n        promise: null\n    };\n}\nasync function dbConnect() {\n    // If we're on the client side, return a dummy connection that won't crash\n    if (isClient) {\n        console.log(\"Client-side MongoDB access attempted - using mock\");\n        return createMockMongoose();\n    }\n    if (cached.conn) {\n        console.log(\"Using cached database connection\");\n        return cached.conn;\n    }\n    if (!cached.promise) {\n        const opts = {\n            bufferCommands: false,\n            // Use these options for more reliable connection\n            serverSelectionTimeoutMS: 5000,\n            connectTimeoutMS: 10000\n        };\n        console.log(\"Connecting to MongoDB...\");\n        cached.promise = mongoose__WEBPACK_IMPORTED_MODULE_0___default().connect(MONGODB_URI, opts).then((mongoose)=>{\n            console.log(\"MongoDB connected successfully\");\n            return mongoose;\n        }).catch((error)=>{\n            console.error(\"MongoDB connection error:\", error);\n            // Return a \"mock mongoose\" that won't crash but won't do anything\n            // This allows the app to continue running without a database\n            return createMockMongoose();\n        });\n    }\n    try {\n        cached.conn = await cached.promise;\n        return cached.conn;\n    } catch (e) {\n        console.error(\"Error resolving MongoDB connection:\", e);\n        throw e;\n    }\n}\n// Creates a mock Mongoose that won't crash but won't do anything\n// Used as a fallback when MongoDB connection fails\nfunction createMockMongoose() {\n    console.warn(\"Using mock Mongoose (no database persistence)\");\n    // In-memory storage for collections\n    const collections = {};\n    // Initialize with empty collections\n    const knownCollections = [\n        'users',\n        'deals',\n        'accounts'\n    ];\n    knownCollections.forEach((name)=>{\n        collections[name] = [];\n    });\n    // Try to load from localStorage or global memory\n    if ( true && window.localStorage) {\n        knownCollections.forEach((name)=>{\n            try {\n                const data = localStorage.getItem(\"rehustle_\".concat(name));\n                if (data) {\n                    collections[name] = JSON.parse(data);\n                    console.log(\"Loaded \".concat(collections[name].length, \" items from localStorage for \").concat(name));\n                }\n            } catch (e) {\n                console.error(\"Error loading \".concat(name, \" from localStorage:\"), e);\n            }\n        });\n    } else if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g._localDbStorage) {\n        knownCollections.forEach((name)=>{\n            try {\n                const data = __webpack_require__.g._localDbStorage[\"rehustle_\".concat(name)];\n                if (data) {\n                    collections[name] = JSON.parse(data);\n                    console.log(\"Loaded \".concat(collections[name].length, \" items from server memory for \").concat(name));\n                }\n            } catch (e) {\n                console.error(\"Error loading \".concat(name, \" from server memory:\"), e);\n            }\n        });\n    }\n    // Save data helper\n    const saveCollection = (name, data)=>{\n        if ( true && window.localStorage) {\n            localStorage.setItem(\"rehustle_\".concat(name), JSON.stringify(data));\n        } else if (typeof __webpack_require__.g !== 'undefined') {\n            if (!__webpack_require__.g._localDbStorage) {\n                __webpack_require__.g._localDbStorage = {};\n            }\n            __webpack_require__.g._localDbStorage[\"rehustle_\".concat(name)] = JSON.stringify(data);\n        }\n    };\n    // Mock mongoose object with minimum required functionality\n    return {\n        // This is what we return from mongoose.connect()\n        connection: {\n            readyState: 1\n        },\n        models: {},\n        model: (name, schema)=>{\n            if (!collections[name]) {\n                collections[name] = [];\n            }\n            // Return a mock model that works with MongoDB-like queries\n            const model = {\n                findOne: async (query)=>{\n                    console.log(\"[MockDB] findOne in \".concat(name, \":\"), query);\n                    const found = collections[name].find((doc)=>Object.entries(query).every((param)=>{\n                            let [key, value] = param;\n                            return doc[key] === value;\n                        }));\n                    return found ? {\n                        ...found\n                    } : null;\n                },\n                find: async (query)=>{\n                    console.log(\"[MockDB] find in \".concat(name, \":\"), query);\n                    return collections[name].filter((doc)=>Object.entries(query).every((param)=>{\n                            let [key, value] = param;\n                            return doc[key] === value;\n                        }));\n                },\n                create: async (data)=>{\n                    console.log(\"[MockDB] create in \".concat(name, \":\"), data);\n                    const _id = \"mock_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substring(2, 8));\n                    const newDoc = {\n                        ...data,\n                        _id\n                    };\n                    collections[name].push(newDoc);\n                    saveCollection(name, collections[name]);\n                    return {\n                        ...newDoc\n                    };\n                },\n                findByIdAndUpdate: async (id, update, options)=>{\n                    console.log(\"[MockDB] findByIdAndUpdate in \".concat(name, \":\"), id, update);\n                    const index = collections[name].findIndex((doc)=>doc._id === id);\n                    if (index === -1) {\n                        if (options === null || options === void 0 ? void 0 : options.upsert) {\n                            const newDoc = {\n                                ...update,\n                                _id: id\n                            };\n                            collections[name].push(newDoc);\n                            saveCollection(name, collections[name]);\n                            return newDoc;\n                        }\n                        return null;\n                    }\n                    // Apply updates\n                    if (update.$set) {\n                        collections[name][index] = {\n                            ...collections[name][index],\n                            ...update.$set\n                        };\n                    } else {\n                        // Direct update\n                        collections[name][index] = {\n                            ...collections[name][index],\n                            ...update\n                        };\n                    }\n                    saveCollection(name, collections[name]);\n                    return {\n                        ...collections[name][index]\n                    };\n                },\n                updateOne: async (filter, update)=>{\n                    console.log(\"[MockDB] updateOne in \".concat(name, \":\"), filter, update);\n                    const index = collections[name].findIndex((doc)=>Object.entries(filter).every((param)=>{\n                            let [key, value] = param;\n                            return doc[key] === value;\n                        }));\n                    if (index !== -1) {\n                        if (update.$set) {\n                            collections[name][index] = {\n                                ...collections[name][index],\n                                ...update.$set\n                            };\n                        } else {\n                            collections[name][index] = {\n                                ...collections[name][index],\n                                ...update\n                            };\n                        }\n                        saveCollection(name, collections[name]);\n                        return {\n                            modifiedCount: 1,\n                            acknowledged: true\n                        };\n                    }\n                    return {\n                        modifiedCount: 0,\n                        acknowledged: true\n                    };\n                },\n                deleteOne: async (filter)=>{\n                    console.log(\"[MockDB] deleteOne in \".concat(name, \":\"), filter);\n                    const initialLength = collections[name].length;\n                    collections[name] = collections[name].filter((doc)=>!Object.entries(filter).every((param)=>{\n                            let [key, value] = param;\n                            return doc[key] === value;\n                        }));\n                    if (initialLength !== collections[name].length) {\n                        saveCollection(name, collections[name]);\n                    }\n                    return {\n                        deletedCount: initialLength - collections[name].length,\n                        acknowledged: true\n                    };\n                }\n            };\n            // Store in models cache\n            if (!this.models[name]) {\n                this.models[name] = model;\n            }\n            return model;\n        }\n    };\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dbConnect);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./lib/mongodb.js\n"));

/***/ })

});